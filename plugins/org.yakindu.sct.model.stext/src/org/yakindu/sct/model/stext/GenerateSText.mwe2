module org.yakindu.sct.model.stext.Stext

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/org/yakindu/sct/model/stext/SText.xtext"
var file.extensions = "stext"
var projectName = "org.yakindu.sct.model.stext"
var runtimeProject = "../${projectName}"

Workflow {
    bean = StandaloneSetup {
	    scanClassPath = true
		platformUri = "${runtimeProject}/.."
		registerGenModelFile = "platform:/resource/org.yakindu.sct.model.sgraph/model/emf/sgraph.genmodel"
		registerGenModelFile = "platform:/resource/org.yakindu.base.types/model/types.genmodel"
		registerGenModelFile = "platform:/resource/org.yakindu.base.expressions/model/Expressions.genmodel"
		registerGenModelFile = "platform:/resource/org.yakindu.sct.model.stext/model/SText.genmodel"
		registerGeneratedEPackage = "org.yakindu.sct.model.sgraph.SGraphPackage"
		registerGeneratedEPackage = "org.yakindu.base.types.TypesPackage"
		registerGeneratedEPackage = "org.yakindu.base.expressions.expressions.ExpressionsPackage"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
//		pathTestProject = "../../test-plugins/${projectName}.test"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		language = {
			uri = grammarURI
			fileExtensions = file.extensions

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment auto-inject {}

			// the serialization component
			fragment = parseTreeConstructor.ParseTreeConstructorFragment {}

			// We can't use the serializer 2.0 yet, this causes some side effects in the SCTResource
//    		fragment = serializer.SerializerFragment auto-inject {
//    			generateStub = false
//    		}
			// a custom ResourceFactory for use with EMF
    		fragment = resourceFactory.ResourceFactoryFragment auto-inject {}
    
    		// The antlr parser generator fragment.
    		fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {}
    
			
			// java-based API for validation 
			fragment = validation.JavaValidatorFragment auto-inject {
				composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
				composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
				// registerForImportedPackages = true
			}

			// scoping and exporting API
    		fragment = scoping.ImportNamespacesScopingFragment auto-inject {}
    		fragment = exporting.QualifiedNamesFragment auto-inject {}
    		fragment = builder.BuilderIntegrationFragment auto-inject {}

			// formatter API 
			fragment = formatting.FormatterFragment auto-inject {}

			// labeling API 
			fragment = labeling.LabelProviderFragment auto-inject {}

			// outline API 
			fragment = outline.OutlineTreeProviderFragment auto-inject {}

			// quickfix API 
			fragment = quickfix.QuickfixProviderFragment auto-inject {}

			// content assist API
    		fragment = contentAssist.ContentAssistFragment auto-inject {}
			
			// generates a more lightweight Antlr parser and lexer tailored for content assist
    		fragment = parser.antlr.XtextAntlrUiGeneratorFragment auto-inject {}

			// generates junit test support classes into Generator#pathTestProject
			fragment = junit.Junit4Fragment {}
		}
	}
}
